/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PartnerService } from "../partner.service";
import { PartnerCreateInput } from "./PartnerCreateInput";
import { Partner } from "./Partner";
import { PartnerFindManyArgs } from "./PartnerFindManyArgs";
import { PartnerWhereUniqueInput } from "./PartnerWhereUniqueInput";
import { PartnerUpdateInput } from "./PartnerUpdateInput";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { BookingWhereUniqueInput } from "../../booking/base/BookingWhereUniqueInput";
import { FacilityFindManyArgs } from "../../facility/base/FacilityFindManyArgs";
import { Facility } from "../../facility/base/Facility";
import { FacilityWhereUniqueInput } from "../../facility/base/FacilityWhereUniqueInput";

export class PartnerControllerBase {
  constructor(protected readonly service: PartnerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Partner })
  async createPartner(
    @common.Body() data: PartnerCreateInput
  ): Promise<Partner> {
    return await this.service.createPartner({
      data: {
        ...data,

        facility: data.facility
          ? {
              connect: data.facility,
            }
          : undefined,
      },
      select: {
        address: true,
        contactEmail: true,
        createdAt: true,

        facility: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Partner] })
  @ApiNestedQuery(PartnerFindManyArgs)
  async partners(@common.Req() request: Request): Promise<Partner[]> {
    const args = plainToClass(PartnerFindManyArgs, request.query);
    return this.service.partners({
      ...args,
      select: {
        address: true,
        contactEmail: true,
        createdAt: true,

        facility: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Partner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async partner(
    @common.Param() params: PartnerWhereUniqueInput
  ): Promise<Partner | null> {
    const result = await this.service.partner({
      where: params,
      select: {
        address: true,
        contactEmail: true,
        createdAt: true,

        facility: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Partner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePartner(
    @common.Param() params: PartnerWhereUniqueInput,
    @common.Body() data: PartnerUpdateInput
  ): Promise<Partner | null> {
    try {
      return await this.service.updatePartner({
        where: params,
        data: {
          ...data,

          facility: data.facility
            ? {
                connect: data.facility,
              }
            : undefined,
        },
        select: {
          address: true,
          contactEmail: true,
          createdAt: true,

          facility: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Partner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePartner(
    @common.Param() params: PartnerWhereUniqueInput
  ): Promise<Partner | null> {
    try {
      return await this.service.deletePartner({
        where: params,
        select: {
          address: true,
          contactEmail: true,
          createdAt: true,

          facility: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/bookings")
  @ApiNestedQuery(BookingFindManyArgs)
  async findBookings(
    @common.Req() request: Request,
    @common.Param() params: PartnerWhereUniqueInput
  ): Promise<Booking[]> {
    const query = plainToClass(BookingFindManyArgs, request.query);
    const results = await this.service.findBookings(params.id, {
      ...query,
      select: {
        bookingTime: true,
        createdAt: true,

        facility: {
          select: {
            id: true,
          },
        },

        id: true,

        partner: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bookings")
  async connectBookings(
    @common.Param() params: PartnerWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        connect: body,
      },
    };
    await this.service.updatePartner({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bookings")
  async updateBookings(
    @common.Param() params: PartnerWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        set: body,
      },
    };
    await this.service.updatePartner({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bookings")
  async disconnectBookings(
    @common.Param() params: PartnerWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        disconnect: body,
      },
    };
    await this.service.updatePartner({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/facilities")
  @ApiNestedQuery(FacilityFindManyArgs)
  async findFacilities(
    @common.Req() request: Request,
    @common.Param() params: PartnerWhereUniqueInput
  ): Promise<Facility[]> {
    const query = plainToClass(FacilityFindManyArgs, request.query);
    const results = await this.service.findFacilities(params.id, {
      ...query,
      select: {
        booking: {
          select: {
            id: true,
          },
        },

        capacity: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,

        partner: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/facilities")
  async connectFacilities(
    @common.Param() params: PartnerWhereUniqueInput,
    @common.Body() body: FacilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      facilities: {
        connect: body,
      },
    };
    await this.service.updatePartner({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/facilities")
  async updateFacilities(
    @common.Param() params: PartnerWhereUniqueInput,
    @common.Body() body: FacilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      facilities: {
        set: body,
      },
    };
    await this.service.updatePartner({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/facilities")
  async disconnectFacilities(
    @common.Param() params: PartnerWhereUniqueInput,
    @common.Body() body: FacilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      facilities: {
        disconnect: body,
      },
    };
    await this.service.updatePartner({
      where: params,
      data,
      select: { id: true },
    });
  }
}
