/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Partner as PrismaPartner,
  Booking as PrismaBooking,
  Facility as PrismaFacility,
} from "@prisma/client";

export class PartnerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PartnerCountArgs, "select">): Promise<number> {
    return this.prisma.partner.count(args);
  }

  async partners<T extends Prisma.PartnerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PartnerFindManyArgs>
  ): Promise<PrismaPartner[]> {
    return this.prisma.partner.findMany<Prisma.PartnerFindManyArgs>(args);
  }
  async partner<T extends Prisma.PartnerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PartnerFindUniqueArgs>
  ): Promise<PrismaPartner | null> {
    return this.prisma.partner.findUnique(args);
  }
  async createPartner<T extends Prisma.PartnerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PartnerCreateArgs>
  ): Promise<PrismaPartner> {
    return this.prisma.partner.create<T>(args);
  }
  async updatePartner<T extends Prisma.PartnerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PartnerUpdateArgs>
  ): Promise<PrismaPartner> {
    return this.prisma.partner.update<T>(args);
  }
  async deletePartner<T extends Prisma.PartnerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PartnerDeleteArgs>
  ): Promise<PrismaPartner> {
    return this.prisma.partner.delete(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.partner
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }

  async findFacilities(
    parentId: string,
    args: Prisma.FacilityFindManyArgs
  ): Promise<PrismaFacility[]> {
    return this.prisma.partner
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .facilities(args);
  }

  async getFacility(parentId: string): Promise<PrismaFacility | null> {
    return this.prisma.partner
      .findUnique({
        where: { id: parentId },
      })
      .facility();
  }
}
