/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IsString, IsOptional, ValidateNested } from "class-validator";
import { BookingCreateNestedManyWithoutPartnersInput } from "./BookingCreateNestedManyWithoutPartnersInput";
import { Type } from "class-transformer";
import { FacilityCreateNestedManyWithoutPartnersInput } from "./FacilityCreateNestedManyWithoutPartnersInput";
import { FacilityWhereUniqueInput } from "../../facility/base/FacilityWhereUniqueInput";

@InputType()
class PartnerCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  address?: string | null;

  @ApiProperty({
    required: false,
    type: () => BookingCreateNestedManyWithoutPartnersInput,
  })
  @ValidateNested()
  @Type(() => BookingCreateNestedManyWithoutPartnersInput)
  @IsOptional()
  @Field(() => BookingCreateNestedManyWithoutPartnersInput, {
    nullable: true,
  })
  bookings?: BookingCreateNestedManyWithoutPartnersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  contactEmail?: string | null;

  @ApiProperty({
    required: false,
    type: () => FacilityCreateNestedManyWithoutPartnersInput,
  })
  @ValidateNested()
  @Type(() => FacilityCreateNestedManyWithoutPartnersInput)
  @IsOptional()
  @Field(() => FacilityCreateNestedManyWithoutPartnersInput, {
    nullable: true,
  })
  facilities?: FacilityCreateNestedManyWithoutPartnersInput;

  @ApiProperty({
    required: false,
    type: () => FacilityWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => FacilityWhereUniqueInput)
  @IsOptional()
  @Field(() => FacilityWhereUniqueInput, {
    nullable: true,
  })
  facility?: FacilityWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string | null;
}

export { PartnerCreateInput as PartnerCreateInput };
