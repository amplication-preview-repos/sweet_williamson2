/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BookingService } from "../booking.service";
import { BookingCreateInput } from "./BookingCreateInput";
import { Booking } from "./Booking";
import { BookingFindManyArgs } from "./BookingFindManyArgs";
import { BookingWhereUniqueInput } from "./BookingWhereUniqueInput";
import { BookingUpdateInput } from "./BookingUpdateInput";
import { FacilityFindManyArgs } from "../../facility/base/FacilityFindManyArgs";
import { Facility } from "../../facility/base/Facility";
import { FacilityWhereUniqueInput } from "../../facility/base/FacilityWhereUniqueInput";

export class BookingControllerBase {
  constructor(protected readonly service: BookingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Booking })
  async createBooking(
    @common.Body() data: BookingCreateInput
  ): Promise<Booking> {
    return await this.service.createBooking({
      data: {
        ...data,

        facility: data.facility
          ? {
              connect: data.facility,
            }
          : undefined,

        partner: data.partner
          ? {
              connect: data.partner,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        bookingTime: true,
        createdAt: true,

        facility: {
          select: {
            id: true,
          },
        },

        id: true,

        partner: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Booking] })
  @ApiNestedQuery(BookingFindManyArgs)
  async bookings(@common.Req() request: Request): Promise<Booking[]> {
    const args = plainToClass(BookingFindManyArgs, request.query);
    return this.service.bookings({
      ...args,
      select: {
        bookingTime: true,
        createdAt: true,

        facility: {
          select: {
            id: true,
          },
        },

        id: true,

        partner: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Booking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async booking(
    @common.Param() params: BookingWhereUniqueInput
  ): Promise<Booking | null> {
    const result = await this.service.booking({
      where: params,
      select: {
        bookingTime: true,
        createdAt: true,

        facility: {
          select: {
            id: true,
          },
        },

        id: true,

        partner: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Booking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBooking(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() data: BookingUpdateInput
  ): Promise<Booking | null> {
    try {
      return await this.service.updateBooking({
        where: params,
        data: {
          ...data,

          facility: data.facility
            ? {
                connect: data.facility,
              }
            : undefined,

          partner: data.partner
            ? {
                connect: data.partner,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          bookingTime: true,
          createdAt: true,

          facility: {
            select: {
              id: true,
            },
          },

          id: true,

          partner: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Booking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBooking(
    @common.Param() params: BookingWhereUniqueInput
  ): Promise<Booking | null> {
    try {
      return await this.service.deleteBooking({
        where: params,
        select: {
          bookingTime: true,
          createdAt: true,

          facility: {
            select: {
              id: true,
            },
          },

          id: true,

          partner: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/facilities")
  @ApiNestedQuery(FacilityFindManyArgs)
  async findFacilities(
    @common.Req() request: Request,
    @common.Param() params: BookingWhereUniqueInput
  ): Promise<Facility[]> {
    const query = plainToClass(FacilityFindManyArgs, request.query);
    const results = await this.service.findFacilities(params.id, {
      ...query,
      select: {
        booking: {
          select: {
            id: true,
          },
        },

        capacity: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,

        partner: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/facilities")
  async connectFacilities(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() body: FacilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      facilities: {
        connect: body,
      },
    };
    await this.service.updateBooking({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/facilities")
  async updateFacilities(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() body: FacilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      facilities: {
        set: body,
      },
    };
    await this.service.updateBooking({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/facilities")
  async disconnectFacilities(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() body: FacilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      facilities: {
        disconnect: body,
      },
    };
    await this.service.updateBooking({
      where: params,
      data,
      select: { id: true },
    });
  }
}
