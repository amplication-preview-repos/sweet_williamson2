/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FacilityService } from "../facility.service";
import { FacilityCreateInput } from "./FacilityCreateInput";
import { Facility } from "./Facility";
import { FacilityFindManyArgs } from "./FacilityFindManyArgs";
import { FacilityWhereUniqueInput } from "./FacilityWhereUniqueInput";
import { FacilityUpdateInput } from "./FacilityUpdateInput";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { BookingWhereUniqueInput } from "../../booking/base/BookingWhereUniqueInput";
import { PartnerFindManyArgs } from "../../partner/base/PartnerFindManyArgs";
import { Partner } from "../../partner/base/Partner";
import { PartnerWhereUniqueInput } from "../../partner/base/PartnerWhereUniqueInput";

export class FacilityControllerBase {
  constructor(protected readonly service: FacilityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Facility })
  async createFacility(
    @common.Body() data: FacilityCreateInput
  ): Promise<Facility> {
    return await this.service.createFacility({
      data: {
        ...data,

        booking: data.booking
          ? {
              connect: data.booking,
            }
          : undefined,

        partner: data.partner
          ? {
              connect: data.partner,
            }
          : undefined,
      },
      select: {
        booking: {
          select: {
            id: true,
          },
        },

        capacity: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,

        partner: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Facility] })
  @ApiNestedQuery(FacilityFindManyArgs)
  async facilities(@common.Req() request: Request): Promise<Facility[]> {
    const args = plainToClass(FacilityFindManyArgs, request.query);
    return this.service.facilities({
      ...args,
      select: {
        booking: {
          select: {
            id: true,
          },
        },

        capacity: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,

        partner: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Facility })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async facility(
    @common.Param() params: FacilityWhereUniqueInput
  ): Promise<Facility | null> {
    const result = await this.service.facility({
      where: params,
      select: {
        booking: {
          select: {
            id: true,
          },
        },

        capacity: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,

        partner: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Facility })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFacility(
    @common.Param() params: FacilityWhereUniqueInput,
    @common.Body() data: FacilityUpdateInput
  ): Promise<Facility | null> {
    try {
      return await this.service.updateFacility({
        where: params,
        data: {
          ...data,

          booking: data.booking
            ? {
                connect: data.booking,
              }
            : undefined,

          partner: data.partner
            ? {
                connect: data.partner,
              }
            : undefined,
        },
        select: {
          booking: {
            select: {
              id: true,
            },
          },

          capacity: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,

          partner: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Facility })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFacility(
    @common.Param() params: FacilityWhereUniqueInput
  ): Promise<Facility | null> {
    try {
      return await this.service.deleteFacility({
        where: params,
        select: {
          booking: {
            select: {
              id: true,
            },
          },

          capacity: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,

          partner: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/bookings")
  @ApiNestedQuery(BookingFindManyArgs)
  async findBookings(
    @common.Req() request: Request,
    @common.Param() params: FacilityWhereUniqueInput
  ): Promise<Booking[]> {
    const query = plainToClass(BookingFindManyArgs, request.query);
    const results = await this.service.findBookings(params.id, {
      ...query,
      select: {
        bookingTime: true,
        createdAt: true,

        facility: {
          select: {
            id: true,
          },
        },

        id: true,

        partner: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bookings")
  async connectBookings(
    @common.Param() params: FacilityWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        connect: body,
      },
    };
    await this.service.updateFacility({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bookings")
  async updateBookings(
    @common.Param() params: FacilityWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        set: body,
      },
    };
    await this.service.updateFacility({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bookings")
  async disconnectBookings(
    @common.Param() params: FacilityWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        disconnect: body,
      },
    };
    await this.service.updateFacility({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/partners")
  @ApiNestedQuery(PartnerFindManyArgs)
  async findPartners(
    @common.Req() request: Request,
    @common.Param() params: FacilityWhereUniqueInput
  ): Promise<Partner[]> {
    const query = plainToClass(PartnerFindManyArgs, request.query);
    const results = await this.service.findPartners(params.id, {
      ...query,
      select: {
        address: true,
        contactEmail: true,
        createdAt: true,

        facility: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/partners")
  async connectPartners(
    @common.Param() params: FacilityWhereUniqueInput,
    @common.Body() body: PartnerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      partners: {
        connect: body,
      },
    };
    await this.service.updateFacility({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/partners")
  async updatePartners(
    @common.Param() params: FacilityWhereUniqueInput,
    @common.Body() body: PartnerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      partners: {
        set: body,
      },
    };
    await this.service.updateFacility({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/partners")
  async disconnectPartners(
    @common.Param() params: FacilityWhereUniqueInput,
    @common.Body() body: PartnerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      partners: {
        disconnect: body,
      },
    };
    await this.service.updateFacility({
      where: params,
      data,
      select: { id: true },
    });
  }
}
