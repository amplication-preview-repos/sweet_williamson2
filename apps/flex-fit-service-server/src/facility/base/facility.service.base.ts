/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Facility as PrismaFacility,
  Booking as PrismaBooking,
  Partner as PrismaPartner,
} from "@prisma/client";

export class FacilityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FacilityCountArgs, "select">): Promise<number> {
    return this.prisma.facility.count(args);
  }

  async facilities<T extends Prisma.FacilityFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FacilityFindManyArgs>
  ): Promise<PrismaFacility[]> {
    return this.prisma.facility.findMany<Prisma.FacilityFindManyArgs>(args);
  }
  async facility<T extends Prisma.FacilityFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FacilityFindUniqueArgs>
  ): Promise<PrismaFacility | null> {
    return this.prisma.facility.findUnique(args);
  }
  async createFacility<T extends Prisma.FacilityCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FacilityCreateArgs>
  ): Promise<PrismaFacility> {
    return this.prisma.facility.create<T>(args);
  }
  async updateFacility<T extends Prisma.FacilityUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FacilityUpdateArgs>
  ): Promise<PrismaFacility> {
    return this.prisma.facility.update<T>(args);
  }
  async deleteFacility<T extends Prisma.FacilityDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FacilityDeleteArgs>
  ): Promise<PrismaFacility> {
    return this.prisma.facility.delete(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.facility
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }

  async findPartners(
    parentId: string,
    args: Prisma.PartnerFindManyArgs
  ): Promise<PrismaPartner[]> {
    return this.prisma.facility
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .partners(args);
  }

  async getBooking(parentId: string): Promise<PrismaBooking | null> {
    return this.prisma.facility
      .findUnique({
        where: { id: parentId },
      })
      .booking();
  }

  async getPartner(parentId: string): Promise<PrismaPartner | null> {
    return this.prisma.facility
      .findUnique({
        where: { id: parentId },
      })
      .partner();
  }
}
